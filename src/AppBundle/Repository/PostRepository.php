<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
	
	public function getPostByUser($user_id,$tag_name = null,$page = null,$nbPerPage = null) {

		$query = $this->createQueryBuilder('p');
		$query
			->leftJoin('p.groupes','g')
			->leftJoin('g.userGroupes','ug')
			->leftJoin('ug.user','u')
			->leftJoin('p.comments', 'com', \Doctrine\ORM\Query\Expr\Join::WITH, 'com.isPublished = 1')
			->where('u.id = :user_id OR p.author = :user_id')
			->setParameter('user_id', $user_id)
			->orderBy('p.lastUpdate', 'DESC');
		
		if (!$tag_name) {
			$query 
				->setParameters(array('user_id' => $user_id));
		}
		else {
			$query
				->andWhere('p.tag LIKE :tag_name')
				->setParameters(array('user_id' => $user_id, 'tag_name' => '%'.$tag_name.'%'));
		}
			
		if ($page && $nbPerPage) {
			$query
				->setFirstResult(($page-1) * $nbPerPage)
				// Ainsi que le nombre d'annonce à afficher sur une page
				->setMaxResults($nbPerPage);
		}
		$query 
			->getQuery();
			
		return new Paginator($query, true);
	}
	
	public function getPostByGroupe($groupe_slug,$user_id = null,$tag_name = null,$page = null,$nbPerPage = null) {
		
		$query = $this->createQueryBuilder('p');
			//->from('AppBundle:Post', 'p')
		$query
			->innerJoin('p.groupes','g')
			//->innerJoin('p.voting','v')
			//->innerJoin('g.users','u')
			->leftJoin('p.comments', 'com', \Doctrine\ORM\Query\Expr\Join::WITH, 'com.isPublished = 1')
			->addSelect('com')
			->leftJoin('p.voting', 'v', \Doctrine\ORM\Query\Expr\Join::WITH, 'v.id = :user_id')
			->addSelect('v')
			->where('g.slug = :groupe_slug')
			//->andWhere('v.id = :user_id')
			->orderBy('p.statut', 'DESC')
			//->addOrderBy("GREATEST(com.date, p.lastUpdate)", "DESC");
			->addOrderBy("p.lastUpdate", "DESC");
			//->addOrderBy('com.lastUpdate', 'DESC');
					
		if (!$tag_name) {
			$query 
				->setParameters(array('groupe_slug' => $groupe_slug, 'user_id' => $user_id));
		}
		else {
			$query
				->andWhere('p.tag LIKE :tag_name')
				->setParameters(array('groupe_slug' => $groupe_slug, 'user_id' => $user_id, 'tag_name' => '%'.$tag_name.'%'));
		}
			
		if ($page && $nbPerPage) {
			$query
				->setFirstResult(($page-1) * $nbPerPage)
				// Ainsi que le nombre d'annonce à afficher sur une page
				->setMaxResults($nbPerPage);
		}
			$query 
				->getQuery();
			
			return new Paginator($query, true);
	}
	
	public function getPostFavoritesByUser($user_id,$tag_name = null,$page = null,$nbPerPage = null) {
			
		$query = $this->createQueryBuilder('p');
		$query
			->innerJoin('p.favoriting','f')
			->leftJoin('p.comments', 'com', \Doctrine\ORM\Query\Expr\Join::WITH, 'com.isPublished = 1')
			->leftJoin('p.voting', 'v', \Doctrine\ORM\Query\Expr\Join::WITH, 'v.id = :user_id')
			->where('f.id = :user_id')
			->orderBy('p.lastUpdate', 'DESC')
			->addOrderBy("com.date", "DESC");
		
		if (!$tag_name) {
			$query 
				->setParameters(array('user_id' => $user_id));
		}
		else {
			$query
				->andWhere('p.tag LIKE :tag_name')
				->setParameters(array('user_id' => $user_id, 'tag_name' => '%'.$tag_name.'%'));
		}
			
		if ($page && $nbPerPage) {
			$query
				->setFirstResult(($page-1) * $nbPerPage)
				// Ainsi que le nombre d'annonce à afficher sur une page
				->setMaxResults($nbPerPage);
		}
		$query 
			->getQuery();
			
		return new Paginator($query, true);
	}
	
	public function getPostByIdAndUser($user_id,$post_id) {

		return $this->getEntityManager()
			->createQueryBuilder()
			->select('p')
			->from('AppBundle:Post', 'p')
			->innerJoin('p.groupes','g')
			->innerJoin('g.userGroupes','ug')
			->innerJoin('ug.user','u')
			//->leftJoin('p.voting', 'v', \Doctrine\ORM\Query\Expr\Join::WITH, 'v.id != :user_id')
			->where('p.id = :post_id')
			//->where('g.id = :groupe_id')
			->andWhere('u.id = :user_id OR p.author = :user_id')
			//->leftJoin('p.voting','v', \Doctrine\ORM\Query\Expr\Join::WITH, 'v.id != :user_id')
			//->andWhere('v.id != :user_id')
			//->orWhere('p.author = :user_id')
			//->orderBy('p.date', 'DESC')
			//->addOrderBy("com.date", "DESC")
			->setParameters(array('user_id' => $user_id, 'post_id' => $post_id))
			->getQuery()
			->getResult();	
	}
	
	public function checkVotePostByUser($user_id,$post_id) {

		return $this->getEntityManager()
			->createQueryBuilder()
			->select('p')
			->from('AppBundle:Post', 'p')
			->innerJoin('p.voting','v')
			->where('p.id = :post_id')
			//->where('g.id = :groupe_id')
			//->leftJoin('p.voting','v', \Doctrine\ORM\Query\Expr\Join::WITH, 'v.id != :user_id')
			->andWhere('v.id = :user_id')
			->setParameters(array('user_id' => $user_id, 'post_id' => $post_id))
			->getQuery()
			->getResult();	
	}
}
